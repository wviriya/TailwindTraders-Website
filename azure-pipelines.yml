variables:
  azureSubscription: nepeters-azure
  resourcegroup: tailwind-traders
  location: eastus
  ImageName: website
  container-registry-name: ttacrajie6a75n2mue
  container-registry-fqdn: ttacrajie6a75n2mue.azurecr.io
  aks-cluster: tailwindtradersaksajie6a75n2mue
  aks-cluster-rg: tailwind-traders
  ingress: 8e1375690b8947f8adf2.eastus.aksapp.io

stages:
- stage: build
  jobs:
  - job: build

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(container-registry-name)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: HelmDeploy@0
      displayName: 'helm init --client-only'
      inputs:
        connectionType: None
        command: init
        arguments: '--client-only'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: HelmDeploy@0
      displayName: 'helm package (tt-web)'
      inputs:
        command: package
        chartPath: 'Deploy/helm/web'
        arguments: '--version $(Build.BuildId)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: AzureCLI@1
      displayName: 'AZ ACR helm push (tt-web)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr helm push -n $(container-registry-name) /home/vsts/work/1/a/web-$(Build.BuildId).tgz'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: CmdLine@2
      displayName: 'docker build (tt-web)'
      inputs:
        script: |
          cd Source/Tailwind.Traders.Web
          docker build -t $(container-registry-fqdn)/web:$(Build.BuildId) .
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: AzureCLI@1
      displayName: 'AZ ACR Login'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptLocation: inlineScript
        inlineScript: 'az acr login --name $(container-registry-name)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: CmdLine@2
      displayName: 'docker push (tt-web)'
      inputs:
        script: |
          docker push $(container-registry-fqdn)/web:$(Build.BuildId)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: release_pre_production
  jobs:
  - deployment: release_pre_production
    displayName: release_pre_production
    pool:
      name: Hosted Ubuntu 1604
    environment: pre-production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'helm init --client-only'
            inputs:
              connectionType: None
              command: init
              arguments: '--client-only'

          - task: AzureCLI@1
            displayName: 'AZ ACR Login'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: 'az acr login --name $(container-registry-name)'

          - task: AzureCLI@1
            inputs:
              azureSubscription: 'nepeters-azure'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(container-registry-name)
                az acr helm repo add --name $(container-registry-name)
                az aks get-credentials --name $(aks-cluster) --resource-group $(aks-cluster-rg) --admin
                helm upgrade web --install -f gvalues.yaml --set ingress.protocol=http --set ingress.hosts=$(ingress) --set image.repository=$(container-registry-fqdn)/web --set image.tag=latest Deploy/helm/web/

- stage: release_production
  jobs:
  - deployment: release_production
    displayName: release_production
    pool:
      name: Hosted Ubuntu 1604
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            inputs:
              script: 'echo Hello world'

          - task: CmdLine@2
            inputs:
              script: 'echo Hello world'